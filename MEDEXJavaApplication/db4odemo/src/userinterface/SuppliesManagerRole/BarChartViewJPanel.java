/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SuppliesManagerRole;

import Buisness.Products.Product;
import Business.CustomerAccount.CustomerAccount;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Order.Order;
import Business.Organization.CustomerServiceOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Harshitha
 */
public class BarChartViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BarChartViewJPanel
     */
    
      private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
   
  

   
    public BarChartViewJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise,EcoSystem business)
    {
            initComponents();
         this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.business=business;
        generateBarChart();
    
}
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(44, 44, 91));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 934, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(171, 238, 255));
        jLabel1.setText("PRODUCT DEMAND BASED ON ORDERS ");

        jButton1.setBackground(new java.awt.Color(44, 44, 91));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(171, 238, 255));
        jButton1.setText("<< BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(457, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(629, 629, 629))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(448, 448, 448))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(860, 860, 860))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton1)
                .addContainerGap(124, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

        Component[] components= userProcessContainer.getComponents();
        for (Component c: components)
        {

            if(c instanceof SuppliesManagerWorkAreaJPanel)
            {
                SuppliesManagerWorkAreaJPanel panel=(SuppliesManagerWorkAreaJPanel)c;
                panel.populate();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
public void generateBarChart()
        
{
      Organization org=null;
        for(Network network:business.getNetworkList()){
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){

                if(enterprise.getName().equals(enterprise.getName())){
                    for(Organization organization1:enterprise.getOrganizationDirectory().getOrganizationList()){
                        if (organization1 instanceof CustomerServiceOrganization){
                            org = organization1;
                            System.out.println("org"+ org.getCustomerDirectoy().getCustomerList());
                            break;
                        }
                    }

                }
            }
        }
         ArrayList<String> allpro =new ArrayList<String>();
        for (Product p :organization.getProductDirectory().getAllProducts())
        {
           
            allpro.add(p.getName());
        }
        Map<String,Integer> bestProduct = new HashMap<String,Integer>();
        if (org!=null){

            for (CustomerAccount ca: org.getCustomerAccountDirectory().getUserAccountList())
            {

                ArrayList<Order> or=ca.getOrderDirectory().getOrderList();
                for (Order o:or){
                    for (Product p:o.getProductList())
                    {  
                        if(allpro.contains(p.getName()))
                                {
                        int count = 0;
                        if(bestProduct.containsKey(p.getName()))
                        //likes = userLikecount.get(user.getId());
                        count=bestProduct.get(p.getName());
                        count= count +1;
                        bestProduct.put(p.getName(),count);
                    }
                    }
                }
            }

            System.out.println("mp is"+ bestProduct );

        }

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (Map.Entry<String, Integer> entry : bestProduct.entrySet()) {
            dataset.setValue(entry.getValue(),"NumberOfProductsSold", entry.getKey());
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }
        //        dataset.setValue(80, "NumberOfProductsSold", "ProductName1");
        //         dataset.setValue(50, "NumberOfProductsSold", "ProductName2");
        //          dataset.setValue(20, "NumberOfProductsSold", "ProductName3");
        //           dataset.setValue(40, "NumberOfProductsSold", "ProductName4");
        JFreeChart chart= ChartFactory.createBarChart("Product Demand","Product Name","Number Of Products Sold",dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p= chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);

        //JPanel jPanel1 = new JPanel();
        jPanel1.setLayout(new java.awt.BorderLayout());

        ChartPanel CP = new ChartPanel(chart);

        jPanel1.add(CP,BorderLayout.CENTER);
        jPanel1.validate();
        jPanel1.setVisible(true);

        //           ChartFrame frame=new ChartFrame("Bar chart for Products",chart);
        //           frame.setVisible(true);
        //           frame.setSize(450,350);
    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
