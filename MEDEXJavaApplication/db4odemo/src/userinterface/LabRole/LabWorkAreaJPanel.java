/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.LabRole;

import Buisness.Products.Product;
import Buisness.Products.ProductDirectory;
import Business.Customer.Customer;
import Business.CustomerAccount.CustomerAccount;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.CartJPanel;
import userinterface.OrderPlacement.CustomerAccountJPanel;
import userinterface.OrderPlacement.OrderJPanel;
import Business.Enterprise.SupplierEnterprise;
import Business.Order.Order;
import Business.Order.OrderDirectory;
import Business.Organization.SupplierProcurementOrganization;
import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import userinterface.AdminRole.CustomerAdminRoleJPanel;
import userinterface.SuppliesManagerRole.Renderer1;
import userinterface.SuppliesManagerRole.ViewPanel;

/**
 *
 * @author Harshitha
 */
public class LabWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LabWorkAreaJPanel
     */
    private CustomerAccount account;
    private JPanel userProcessContainer;
    private EcoSystem system;
    private Organization organization;
    private Enterprise enterprise;
    public LabWorkAreaJPanel(JPanel userProcessContainer, CustomerAccount account, Organization organization, Enterprise enterprise,EcoSystem system) {
        initComponents();
        this.account =account;
        this.userProcessContainer =userProcessContainer;
        this.system= system;
        this.enterprise = enterprise;
        this.organization=organization;
       // int rowCount = analyzerTable.getRowCount();
        mostbought();
        refreshTable();
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
         headerRenderer.setBackground(new Color(85,79,102));

         for (int i = 0; i < analyzerTable2.getModel().getColumnCount(); i++) {
        analyzerTable2.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
         for (int i = 0; i < analyzerTable.getModel().getColumnCount(); i++) {
        analyzerTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
         for (int i = 0; i < analyzerTable4.getModel().getColumnCount(); i++) {
        analyzerTable4.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
         for (int i = 0; i < lcmsTable.getModel().getColumnCount(); i++) {
        lcmsTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
         for (int i = 0; i < analyzerTable5.getModel().getColumnCount(); i++) {
        analyzerTable5.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
         for (int i = 0; i < analyzerTable1.getModel().getColumnCount(); i++) {
        analyzerTable1.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
          
    }
        
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        Panel = new javax.swing.JPanel();
        TabPanel = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        Product1 = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        Product2 = new javax.swing.JLabel();
        name1 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        description1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        analyzerTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        sortbyJComboBox = new javax.swing.JComboBox();
        analyzerSearch = new javax.swing.JTextField();
        buttongasButton = new javax.swing.JButton();
        ElectrolyteButton = new javax.swing.JButton();
        cogulationButton = new javax.swing.JButton();
        drugtestingButton = new javax.swing.JButton();
        urinalysisButton = new javax.swing.JButton();
        HematologyButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        incubatorTable = new javax.swing.JScrollPane();
        analyzerTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        analyzerSearch1 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reagentsTable = new javax.swing.JScrollPane();
        analyzerTable4 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        analyzerSearch3 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        MicroplateTable = new javax.swing.JScrollPane();
        analyzerTable5 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        analyzerSearch4 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        centrifugesTable = new javax.swing.JScrollPane();
        analyzerTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        analyzerSearch5 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lcmsSolventsTable = new javax.swing.JScrollPane();
        lcmsTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        analyzerSearch2 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        jPanel7.setBackground(new java.awt.Color(44, 44, 91));

        jButton8.setBackground(new java.awt.Color(44, 44, 91));
        jButton8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(171, 238, 255));
        jButton8.setText("CART");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        Panel.setLayout(new java.awt.CardLayout());

        TabPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabPanelMouseClicked(evt);
            }
        });
        TabPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                TabPanelComponentShown(evt);
            }
        });
        TabPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TabPanelFocusGained(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(44, 44, 91));

        jPanel9.setBackground(new java.awt.Color(44, 44, 91));

        jButton1.setBackground(new java.awt.Color(44, 44, 91));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(171, 238, 255));
        jButton1.setText("SHOP");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        name.setBackground(new java.awt.Color(44, 44, 91));
        name.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        name.setForeground(new java.awt.Color(171, 238, 255));

        description.setBackground(new java.awt.Color(44, 44, 91));
        description.setColumns(20);
        description.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        description.setForeground(new java.awt.Color(171, 238, 255));
        description.setRows(5);
        jScrollPane9.setViewportView(description);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Product1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9))
                .addGap(109, 109, 109)
                .addComponent(jButton1)
                .addGap(53, 53, 53))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Product1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jButton1)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(171, 238, 255));
        jLabel13.setText("BEST PRODUCTS ");

        jPanel10.setBackground(new java.awt.Color(44, 44, 91));

        jButton2.setBackground(new java.awt.Color(44, 44, 91));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(171, 238, 255));
        jButton2.setText("SHOP");

        name1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        name1.setForeground(new java.awt.Color(171, 238, 255));

        description1.setBackground(new java.awt.Color(44, 44, 91));
        description1.setColumns(20);
        description1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        description1.setForeground(new java.awt.Color(171, 238, 255));
        description1.setRows(5);
        jScrollPane8.setViewportView(description1);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Product2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1118, Short.MAX_VALUE)
                    .addComponent(name1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(110, 110, 110)
                .addComponent(jButton2)
                .addGap(51, 51, 51))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(Product2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        TabPanel.addTab("HOME", jPanel8);

        jPanel1.setBackground(new java.awt.Color(44, 44, 91));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(44, 44, 91));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        analyzerTable.setBackground(new java.awt.Color(44, 44, 91));
        analyzerTable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerTable.setForeground(new java.awt.Color(171, 238, 255));
        analyzerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "PRODUCT", "PRICE"
            }
        ));
        analyzerTable.setSelectionBackground(new java.awt.Color(85, 79, 102));
        analyzerTable.setSelectionForeground(new java.awt.Color(171, 238, 255));
        analyzerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyzerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(analyzerTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(171, 238, 255));
        jLabel1.setText("SORT BY");

        sortbyJComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sortbyJComboBox.setForeground(new java.awt.Color(171, 238, 255));
        sortbyJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT AN OPTION", "PRICE LOW TO HIGH", "PRICE HIGH TO LOW" }));
        sortbyJComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sortbyJComboBoxMouseClicked(evt);
            }
        });
        sortbyJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortbyJComboBoxItemStateChanged(evt);
            }
        });
        sortbyJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyJComboBoxActionPerformed(evt);
            }
        });

        analyzerSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerSearch.setForeground(new java.awt.Color(171, 238, 255));
        analyzerSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                analyzerSearchKeyReleased(evt);
            }
        });

        buttongasButton.setBackground(new java.awt.Color(85, 79, 102));
        buttongasButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        buttongasButton.setForeground(new java.awt.Color(171, 238, 255));
        buttongasButton.setText("BLOOD GAS ANALYZER");
        buttongasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttongasButtonActionPerformed(evt);
            }
        });

        ElectrolyteButton.setBackground(new java.awt.Color(85, 79, 102));
        ElectrolyteButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ElectrolyteButton.setForeground(new java.awt.Color(171, 238, 255));
        ElectrolyteButton.setText("ELECTROLYTE ANALYZER");
        ElectrolyteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElectrolyteButtonActionPerformed(evt);
            }
        });

        cogulationButton.setBackground(new java.awt.Color(85, 79, 102));
        cogulationButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cogulationButton.setForeground(new java.awt.Color(171, 238, 255));
        cogulationButton.setText("COGULATION ANALYZER");
        cogulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cogulationButtonActionPerformed(evt);
            }
        });

        drugtestingButton.setBackground(new java.awt.Color(85, 79, 102));
        drugtestingButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        drugtestingButton.setForeground(new java.awt.Color(171, 238, 255));
        drugtestingButton.setText("DRUG TESTING ANALYZER");
        drugtestingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drugtestingButtonActionPerformed(evt);
            }
        });

        urinalysisButton.setBackground(new java.awt.Color(85, 79, 102));
        urinalysisButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        urinalysisButton.setForeground(new java.awt.Color(171, 238, 255));
        urinalysisButton.setText("URINALYSIS ANALYZER");
        urinalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urinalysisButtonActionPerformed(evt);
            }
        });

        HematologyButton.setBackground(new java.awt.Color(85, 79, 102));
        HematologyButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        HematologyButton.setForeground(new java.awt.Color(171, 238, 255));
        HematologyButton.setText("HEMATOLOGY ANALYZER");
        HematologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HematologyButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(171, 238, 255));
        jLabel7.setText("SEARCH");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ElectrolyteButton)
                    .addComponent(buttongasButton))
                .addGap(515, 515, 515)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cogulationButton)
                    .addComponent(drugtestingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 396, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(urinalysisButton)
                    .addComponent(HematologyButton))
                .addGap(78, 78, 78))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(sortbyJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(237, 237, 237)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(analyzerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ElectrolyteButton, HematologyButton, buttongasButton, cogulationButton, drugtestingButton, urinalysisButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttongasButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ElectrolyteButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cogulationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drugtestingButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(urinalysisButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HematologyButton)))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sortbyJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyzerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ElectrolyteButton, HematologyButton, buttongasButton, cogulationButton, drugtestingButton, urinalysisButton});

        TabPanel.addTab("ANALYZERS", jPanel1);

        jPanel3.setBackground(new java.awt.Color(44, 44, 91));
        jPanel3.setForeground(new java.awt.Color(44, 44, 91));

        incubatorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                incubatorTableMouseClicked(evt);
            }
        });

        analyzerTable2.setBackground(new java.awt.Color(44, 44, 91));
        analyzerTable2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerTable2.setForeground(new java.awt.Color(171, 238, 255));
        analyzerTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "PRODUCT", "PRICE"
            }
        ));
        analyzerTable2.setSelectionBackground(new java.awt.Color(85, 79, 102));
        analyzerTable2.setSelectionForeground(new java.awt.Color(85, 79, 102));
        analyzerTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyzerTable2MouseClicked(evt);
            }
        });
        incubatorTable.setViewportView(analyzerTable2);

        jScrollPane3.setViewportView(incubatorTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(171, 238, 255));
        jLabel3.setText("SORT BY");

        jComboBox3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(171, 238, 255));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRICE LOW TO HIGH", "PRICE HIGH TO LOW" }));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(171, 238, 255));
        jLabel8.setText("SEARCH");

        analyzerSearch1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerSearch1.setForeground(new java.awt.Color(171, 238, 255));
        analyzerSearch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                analyzerSearch1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1878, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(analyzerSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(analyzerSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE))
        );

        TabPanel.addTab("INCUBATORS", jPanel3);

        jPanel6.setBackground(new java.awt.Color(44, 44, 91));

        reagentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reagentsTableMouseClicked(evt);
            }
        });

        analyzerTable4.setBackground(new java.awt.Color(44, 44, 91));
        analyzerTable4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerTable4.setForeground(new java.awt.Color(171, 238, 255));
        analyzerTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "PRODUCT", "PRICE"
            }
        ));
        analyzerTable4.setSelectionBackground(new java.awt.Color(85, 79, 102));
        analyzerTable4.setSelectionForeground(new java.awt.Color(171, 238, 255));
        analyzerTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyzerTable4MouseClicked(evt);
            }
        });
        reagentsTable.setViewportView(analyzerTable4);

        jScrollPane2.setViewportView(reagentsTable);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(171, 238, 255));
        jLabel5.setText("SORT BY");

        jComboBox5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox5.setForeground(new java.awt.Color(171, 238, 255));
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRICE LOW TO HIGH", "PRICE HIGH TO LOW" }));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(171, 238, 255));
        jLabel10.setText("SEARCH");

        analyzerSearch3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerSearch3.setForeground(new java.awt.Color(171, 238, 255));
        analyzerSearch3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                analyzerSearch3KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1878, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(analyzerSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(analyzerSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE))
        );

        TabPanel.addTab("REAGENTS", jPanel6);

        jPanel5.setBackground(new java.awt.Color(44, 44, 91));

        MicroplateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MicroplateTableMouseClicked(evt);
            }
        });

        analyzerTable5.setBackground(new java.awt.Color(44, 44, 91));
        analyzerTable5.setForeground(new java.awt.Color(171, 238, 255));
        analyzerTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "PRODUCT", "PRICE"
            }
        ));
        analyzerTable5.setSelectionBackground(new java.awt.Color(85, 79, 102));
        analyzerTable5.setSelectionForeground(new java.awt.Color(171, 238, 255));
        analyzerTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyzerTable5MouseClicked(evt);
            }
        });
        MicroplateTable.setViewportView(analyzerTable5);

        jScrollPane6.setViewportView(MicroplateTable);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(171, 238, 255));
        jLabel6.setText("SORT BY");

        jComboBox6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox6.setForeground(new java.awt.Color(171, 238, 255));
        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRICE LOW TO HIGH", "PRICE HIGH TO LOW" }));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(171, 238, 255));
        jLabel11.setText("SEARCH");

        analyzerSearch4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerSearch4.setForeground(new java.awt.Color(171, 238, 255));
        analyzerSearch4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                analyzerSearch4KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1878, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(analyzerSearch4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(analyzerSearch4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE))
        );

        TabPanel.addTab("MICROPLATE READERS/WASHER", jPanel5);

        jPanel2.setBackground(new java.awt.Color(44, 44, 91));

        centrifugesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                centrifugesTableMouseClicked(evt);
            }
        });

        analyzerTable1.setBackground(new java.awt.Color(44, 44, 91));
        analyzerTable1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerTable1.setForeground(new java.awt.Color(171, 238, 255));
        analyzerTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "PRODUCT", "PRICE"
            }
        ));
        analyzerTable1.setSelectionBackground(new java.awt.Color(85, 79, 102));
        analyzerTable1.setSelectionForeground(new java.awt.Color(171, 238, 255));
        analyzerTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyzerTable1MouseClicked(evt);
            }
        });
        centrifugesTable.setViewportView(analyzerTable1);

        jScrollPane4.setViewportView(centrifugesTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(171, 238, 255));
        jLabel2.setText("SORT BY");

        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(171, 238, 255));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRICE LOW TO HIGH", "PRICE HIGH TO LOW" }));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(171, 238, 255));
        jLabel12.setText("SEARCH");

        analyzerSearch5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerSearch5.setForeground(new java.awt.Color(171, 238, 255));
        analyzerSearch5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                analyzerSearch5KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1878, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(analyzerSearch5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(analyzerSearch5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE))
        );

        TabPanel.addTab("CENTRIFUGES", jPanel2);

        jPanel4.setBackground(new java.awt.Color(44, 44, 91));

        lcmsSolventsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lcmsSolventsTableMouseClicked(evt);
            }
        });

        lcmsTable.setBackground(new java.awt.Color(44, 44, 91));
        lcmsTable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lcmsTable.setForeground(new java.awt.Color(171, 238, 255));
        lcmsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "PRODUCT", "PRICE"
            }
        ));
        lcmsTable.setSelectionBackground(new java.awt.Color(85, 79, 102));
        lcmsTable.setSelectionForeground(new java.awt.Color(171, 238, 255));
        lcmsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lcmsTableMouseClicked(evt);
            }
        });
        lcmsSolventsTable.setViewportView(lcmsTable);

        jScrollPane5.setViewportView(lcmsSolventsTable);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(171, 238, 255));
        jLabel4.setText("SORT BY");

        jComboBox4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox4.setForeground(new java.awt.Color(171, 238, 255));
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRICE LOW TO HIGH", "PRICE HIGH TO LOW" }));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(171, 238, 255));
        jLabel9.setText("SEARCH");

        analyzerSearch2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analyzerSearch2.setForeground(new java.awt.Color(171, 238, 255));
        analyzerSearch2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                analyzerSearch2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1878, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(analyzerSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(analyzerSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabPanel.addTab("LC-MS SOLVENTS ", jPanel4);

        Panel.add(TabPanel, "card2");

        jButton9.setBackground(new java.awt.Color(44, 44, 91));
        jButton9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(171, 238, 255));
        jButton9.setText("HOME ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(44, 44, 91));
        jButton10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(171, 238, 255));
        jButton10.setText("ORDERS");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(44, 44, 91));
        jButton11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton11.setForeground(new java.awt.Color(171, 238, 255));
        jButton11.setText("ACCOUNT");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(30, 30, 30)
                .addComponent(jButton10)
                .addGap(28, 28, 28)
                .addComponent(jButton11)
                .addGap(26, 26, 26)
                .addComponent(jButton8)
                .addGap(44, 44, 44))
            .addComponent(Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton10, jButton11, jButton8, jButton9});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton10, jButton11, jButton8, jButton9});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1883, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 850, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void  mostbought(){
        OrderDirectory od = new OrderDirectory();
        ProductDirectory prod = new ProductDirectory();
    Map<Integer,Integer> mostbought =  new HashMap<Integer,Integer>();
    for(CustomerAccount account1 : organization.getCustomerAccountDirectory().getUserAccountList()){
            for(Order o : account1.getOrderDirectory().getOrderList()){
                od.getOrderList().add(o);
            }
        }
    for (Order o : od.getOrderList()){
        for(Product p : o.getProductList()){
            if(p.getProductType().equals("Equipment")){
           prod.getAllProducts().add(p);
        }
       }
    }
    for (Product p : prod.getAllProducts()){
        int noofQuantity = p.getQuantity();
        int noofproducts =0;
        for(int i= noofQuantity;i>0;i--){
        if(mostbought.containsKey(p.getID()))
            noofproducts = mostbought.get(p.getID());
        noofproducts+=1;
        noofQuantity = noofQuantity -1;
        mostbought.put(p.getID(),noofproducts);
        }
    }
    Set<Map.Entry<Integer,Integer>> set = mostbought.entrySet();
    List<Map.Entry<Integer,Integer>> list = new ArrayList<Map.Entry<Integer,Integer>>(set);
    Collections.sort(list,new Comparator<Map.Entry<Integer,Integer>>()
    {
        public int compare(Map.Entry<Integer,Integer> o1,Map.Entry<Integer,Integer> o2){
            return(o2.getValue()).compareTo(o1.getValue());
        }
    });
    int productID = 0 ;
    System.out.println("\n Top most bought products");
    for(int i =0; i< list.size() && i< 1 ;i++){
        System.out.println(list.get(i));
        productID = list.get(i).getKey();
    }
   for(Product p : prod.getAllProducts()){
       if(productID == p.getID()){
           name.setText(p.getName());
           description.setText(p.getDesc());
           BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
             ImageIcon icon = new ImageIcon(imgFromDb);
//    ImageIcon i = ResizeImage(imgFromDb,null);
        Product1 .setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
   } 
   int productID2 = 0;
   for(int i =0; i< list.size() && i< 2 ;i++){
        System.out.println(list.get(i));
        productID2 = list.get(i).getKey();
    }
   for(Product p : prod.getAllProducts()){
       if(productID2 == p.getID()){
           name1.setText(p.getName());
           description1.setText(p.getDesc());
           BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
             ImageIcon icon = new ImageIcon(imgFromDb);
//    ImageIcon i = ResizeImage(imgFromDb,null);
        Product1 .setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
   } 
    }
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Panel.removeAll();
        CartJPanel cart = new CartJPanel(Panel,system,account,organization,enterprise);
        Panel.add("Cart",cart);
        CardLayout crdLyt = (CardLayout) Panel.getLayout();
        crdLyt.next(Panel);
    }//GEN-LAST:event_jButton8ActionPerformed

    public void refreshTable(){
        int rowCount1 = analyzerTable.getRowCount();
            DefaultTableModel model1 = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount1 - 1; i >=0; i--) {
            model1.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                        for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                                for(Product p :o.getProductDirectory().getEquipproductlist()){
                                  if(p.getType().equals("BLOOD GAS ANALYZER") || p.getType().equals("ELECTROLYTE ANALYZER")|| p.getType().equals("COGULATION ANALYZER") ||p.getType().equals("DRUG TESTING ANALYZER")||p.getType().equals("HEMATOLOGY ANALYZER") ||p.getType().equals("URINALYZER ANALYZER")){
                                         Product pro=p;
                                         double price=p.getPrice();
                                         BufferedImage imgFromDb = null;
                                            InputStream in = new ByteArrayInputStream(p.getImagetry());
                                            try {
                                                imgFromDb = ImageIO.read(in);
                                                ImageIcon icon = new ImageIcon(imgFromDb);
                                                model1.addRow(new Object[] {pro,p.getImagetry(),price});
                                                analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());

                                                } catch (IOException ex) {
                                                Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                                         }
                                    }
                                    }
                                }
                            }
                        }
                    }    
                }
            int rowCount2 = analyzerTable1.getRowCount();
            DefaultTableModel model2 = (DefaultTableModel)analyzerTable1.getModel();
        for(int i = rowCount2 - 1; i >=0; i--) {
            model2.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                        for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                                for(Product p :o.getProductDirectory().getEquipproductlist()){
                                  if(p.getType().equals("CENTRIFUGES")){
                                        Product pro=p;
                                         double price=p.getPrice();
                                         BufferedImage imgFromDb = null;
                                            InputStream in = new ByteArrayInputStream(p.getImagetry());
                                            try {
                                                imgFromDb = ImageIO.read(in);
                                                ImageIcon icon = new ImageIcon(imgFromDb);
                                                model2.addRow(new Object[] {pro,p.getImagetry(),price});
                                                analyzerTable1.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());

                                                } catch (IOException ex) {
                                                Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                                         }
                                    }
                                    }
                                }
                            }
                        }
                    }    
                }
//        }
//        else if(TabPanel.getSelectedIndex() == 4){
            int rowCount3 = lcmsTable.getRowCount();
            DefaultTableModel model3 = (DefaultTableModel)lcmsTable.getModel();
        for(int i = rowCount3 - 1; i >=0; i--) {
            model3.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                        for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                                for(Product p :o.getProductDirectory().getEquipproductlist()){
                                  if(p.getType().equals("LC-MS SOLVENTS")){
                                       Product pro=p;
                                         double price=p.getPrice();
                                         BufferedImage imgFromDb = null;
                                            InputStream in = new ByteArrayInputStream(p.getImagetry());
                                            try {
                                                imgFromDb = ImageIO.read(in);
                                                ImageIcon icon = new ImageIcon(imgFromDb);
                                                model3.addRow(new Object[] {pro,p.getImagetry(),price});
                                                lcmsTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());

                                                } catch (IOException ex) {
                                                Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                                         }
                                    }
                                    }
                                }
                            }
                        }
                    }    
                }
//        }
//        else if(TabPanel.getSelectedIndex() == 5){
            int rowCount7 = analyzerTable2.getRowCount();
            DefaultTableModel model7 = (DefaultTableModel)analyzerTable2.getModel();
        for(int i = rowCount7 - 1; i >=0; i--) {
            model7.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                        for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                                for(Product p :o.getProductDirectory().getEquipproductlist()){
                                  if(p.getType().equals("INCUBATORS")){
                                       Product pro=p;
                                         double price=p.getPrice();
                                         BufferedImage imgFromDb = null;
                                            InputStream in = new ByteArrayInputStream(p.getImagetry());
                                            try {
                                                imgFromDb = ImageIO.read(in);
                                                ImageIcon icon = new ImageIcon(imgFromDb);
                                                model7.addRow(new Object[] {pro,p.getImagetry(),price});
                                                analyzerTable2.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());

                                                } catch (IOException ex) {
                                                Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                                         }
                                    }
                                    }
                                }
                            }
                        }
                    }    
                }
//        }
//        else if(TabPanel.getSelectedIndex() == 6){
            int rowCount4 = analyzerTable4.getRowCount();
            DefaultTableModel model4 = (DefaultTableModel)analyzerTable4.getModel();
        for(int i = rowCount4 - 1; i >=0; i--) {
            model4.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                        for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                                for(Product p :o.getProductDirectory().getEquipproductlist()){
                                  if(p.getType().equals("REAGENTS")){
                                         Product pro=p;
                                         double price=p.getPrice();
                                         BufferedImage imgFromDb = null;
                                            InputStream in = new ByteArrayInputStream(p.getImagetry());
                                            try {
                                                imgFromDb = ImageIO.read(in);
                                                ImageIcon icon = new ImageIcon(imgFromDb);
                                                model4.addRow(new Object[] {pro,p.getImagetry(),price});
                                                analyzerTable4.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());

                                                } catch (IOException ex) {
                                                Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                                         }
                                    }
                                }
                            }
                        }
                    }    
                }
            }
//        else if(TabPanel.getSelectedIndex() == 7){
            int rowCount5 = analyzerTable5.getRowCount();
            DefaultTableModel model5 = (DefaultTableModel)analyzerTable5.getModel();
        for(int i = rowCount5 - 1; i >=0; i--) {
            model5.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                        for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                                for(Product p :o.getProductDirectory().getEquipproductlist()){
                                  if(p.getType().equals("MICROPLATE READERS/WASHERS")){
                                         Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    model5.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable5.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                                    }
                                }
                            }
                        }
                    }    
                }
            }
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Panel.removeAll();
        Panel.add("TabPanel",TabPanel);
        CardLayout layout =(CardLayout) Panel.getLayout();
        layout.next(Panel);
        Component[] components= userProcessContainer.getComponents();
            for (Component c: components)
            {

                if(c instanceof LabWorkAreaJPanel)

                {
                    LabWorkAreaJPanel panel=(LabWorkAreaJPanel)c;
                    panel. refreshTable();
                }
            }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Panel.removeAll();
        OrderJPanel order = new OrderJPanel(Panel,system,account,organization);
        Panel.add(order);
        CardLayout layout =(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        Panel.removeAll();
        CustomerAccountJPanel customer = new CustomerAccountJPanel(Panel,system,account,organization);
        Panel.add(customer);
        CardLayout layout =(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void TabPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TabPanelFocusGained

    }//GEN-LAST:event_TabPanelFocusGained

    private void TabPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_TabPanelComponentShown

    }//GEN-LAST:event_TabPanelComponentShown

    private void TabPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabPanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TabPanelMouseClicked

    private void MicroplateTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MicroplateTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_MicroplateTableMouseClicked

    private void analyzerTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyzerTable5MouseClicked
              int selectRow= analyzerTable5.getSelectedRow();
        Product p=(Product)analyzerTable5.getValueAt(selectRow, 0);

        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,p,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_analyzerTable5MouseClicked

    private void analyzerSearch3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analyzerSearch3KeyReleased
        DefaultTableModel dtm = (DefaultTableModel)analyzerTable4.getModel();
        String search = analyzerSearch3.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        analyzerTable4.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_analyzerSearch3KeyReleased

    private void reagentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reagentsTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_reagentsTableMouseClicked

    private void analyzerTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyzerTable4MouseClicked
        int selectRow= analyzerTable4.getSelectedRow();
        Product p=(Product)analyzerTable4.getValueAt(selectRow, 0);

        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,p,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_analyzerTable4MouseClicked

    private void analyzerSearch2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analyzerSearch2KeyReleased
        DefaultTableModel dtm = (DefaultTableModel)lcmsTable.getModel();
        String search = analyzerSearch2.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        lcmsTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_analyzerSearch2KeyReleased

    private void lcmsSolventsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lcmsSolventsTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lcmsSolventsTableMouseClicked

    private void lcmsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lcmsTableMouseClicked
        int selectRow= lcmsTable.getSelectedRow();
        Product p=(Product)lcmsTable.getValueAt(selectRow, 0);

        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,p,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_lcmsTableMouseClicked

    private void analyzerSearch1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analyzerSearch1KeyReleased
        DefaultTableModel dtm = (DefaultTableModel)analyzerTable2.getModel();
        String search = analyzerSearch1.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        analyzerTable2.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_analyzerSearch1KeyReleased

    private void incubatorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_incubatorTableMouseClicked

    }//GEN-LAST:event_incubatorTableMouseClicked

    private void analyzerTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyzerTable2MouseClicked
           int selectRow= analyzerTable2.getSelectedRow();
        Product p=(Product)analyzerTable2.getValueAt(selectRow, 0);

        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,p,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_analyzerTable2MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked

    }//GEN-LAST:event_jPanel1MouseClicked

    private void HematologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HematologyButtonActionPerformed
        int rowCount = analyzerTable.getRowCount();
        DefaultTableModel cogulation = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            cogulation.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                    for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                            for(Product p :o.getProductDirectory().getEquipproductlist()){
                                if(p.getType().equals("HEMATOLOGY ANALYZER")){
                                     Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    cogulation.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                            }
                        }
                    }
                }
            }
        }
        }
    }//GEN-LAST:event_HematologyButtonActionPerformed

    private void urinalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urinalysisButtonActionPerformed
        int rowCount = analyzerTable.getRowCount();
        DefaultTableModel cogulation = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            cogulation.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                    for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                            for(Product p :o.getProductDirectory().getEquipproductlist()){
                                if(p.getType().equals("URINALYSIS ANALYZER")){
                                     Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    cogulation.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                            }
                        }
                    }
                }
            }
        }
        }
    }//GEN-LAST:event_urinalysisButtonActionPerformed

    private void drugtestingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugtestingButtonActionPerformed
        int rowCount = analyzerTable.getRowCount();
        DefaultTableModel cogulation = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            cogulation.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                    for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                            for(Product p :o.getProductDirectory().getEquipproductlist()){
                                if(p.getType().equals("DRUG TESTING ANALYZER")){
                                                          Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    cogulation.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                            }
                        }
                    }
                }
            }
        }
        }
    }//GEN-LAST:event_drugtestingButtonActionPerformed

    private void cogulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cogulationButtonActionPerformed
        int rowCount = analyzerTable.getRowCount();
        DefaultTableModel cogulation = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            cogulation.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                    for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                            for(Product p :o.getProductDirectory().getEquipproductlist()){
                                if(p.getType().equals("COGULATION ANALYZER")){
                                                          Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    cogulation.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                            }
                        }
                    }
                }
            }
        }
        }        
    }//GEN-LAST:event_cogulationButtonActionPerformed

    private void ElectrolyteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElectrolyteButtonActionPerformed
        int rowCount = analyzerTable.getRowCount();
        DefaultTableModel cogulation = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            cogulation.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                    for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                            for(Product p :o.getProductDirectory().getEquipproductlist()){
                                if(p.getType().equals("ELECTROLYTE ANALYZER")){
                                                          Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    cogulation.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                            }
                        }
                    }
                }
            }
        }
        }
    }//GEN-LAST:event_ElectrolyteButtonActionPerformed

    private void buttongasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttongasButtonActionPerformed
        int rowCount = analyzerTable.getRowCount();
        DefaultTableModel blood = (DefaultTableModel)analyzerTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            blood.removeRow(i);
        }
        for(Network network:system.getNetworkList()){
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof SupplierEnterprise){
                    for(Organization o :e.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof SupplierProcurementOrganization){
                            for(Product p :o.getProductDirectory().getEquipproductlist()){
                                if(p.getType().equals("BLOOD GAS ANALYZER") ){
                                                          Product pro=p;
            
            double price=p.getPrice();
            
            
             BufferedImage imgFromDb = null;
        InputStream in = new ByteArrayInputStream(p.getImagetry());
        try {
             imgFromDb = ImageIO.read(in);
               
    ImageIcon icon = new ImageIcon(imgFromDb);
         //img.setIcon(icon);
//         Renderer1 re= new Renderer1();
//            re.lbl.setIcon(icon);
//            tblDirectory.getColumnModel().getColumn(3).setCellRenderer(re);
    
    blood.addRow(new Object[] {pro,p.getImagetry(),price});
    analyzerTable.getColumnModel().getColumn(1).setCellRenderer(new Renderer1());
    
        } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                            }
                        }
                    }
                }
            }
        }
        }    
    }//GEN-LAST:event_buttongasButtonActionPerformed

    private void analyzerSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analyzerSearchKeyReleased
        DefaultTableModel dtm = (DefaultTableModel)analyzerTable.getModel();
        String search = analyzerSearch.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        analyzerTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_analyzerSearchKeyReleased

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void analyzerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyzerTableMouseClicked
        int selectRow= analyzerTable.getSelectedRow();
        Product p=(Product)analyzerTable.getValueAt(selectRow, 0);

        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,p,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_analyzerTableMouseClicked

    private void analyzerSearch4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analyzerSearch4KeyReleased
        DefaultTableModel dtm = (DefaultTableModel)analyzerTable5.getModel();
        String search = analyzerSearch4.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        analyzerTable5.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_analyzerSearch4KeyReleased

    private void centrifugesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_centrifugesTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_centrifugesTableMouseClicked

    private void analyzerTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyzerTable1MouseClicked
                      int selectRow= analyzerTable1.getSelectedRow();
        Product p=(Product)analyzerTable1.getValueAt(selectRow, 0);

        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,p,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_analyzerTable1MouseClicked

    private void analyzerSearch5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analyzerSearch5KeyReleased
        DefaultTableModel dtm = (DefaultTableModel)analyzerTable1.getModel();
        String search = analyzerSearch5.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        analyzerTable1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_analyzerSearch5KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       Product product = null;
        OrderDirectory od = new OrderDirectory();
        ProductDirectory prod = new ProductDirectory();
    for(CustomerAccount account1 : organization.getCustomerAccountDirectory().getUserAccountList()){
            for(Order o : account1.getOrderDirectory().getOrderList()){
                od.getOrderList().add(o);
            }
        }
    for (Order o : od.getOrderList()){
        for(Product p : o.getProductList()){
           prod.getAllProducts().add(p);
        }
    }
    for (Product p : prod.getAllProducts()){
      if  (name.getText().equals(p.getName()));
      product =p;
    }
        ProductDescJPanel ProductDesc= new ProductDescJPanel(Panel,product,organization,enterprise,account);
        Panel.add("ProductDesc",ProductDesc);
        CardLayout layout=(CardLayout) Panel.getLayout();
        layout.next(Panel);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sortbyJComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortbyJComboBoxMouseClicked
if (sortbyJComboBox.getSelectedItem() == "PRICE LOW TO HIGH"){
TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(analyzerTable.getModel());
analyzerTable.setRowSorter(sorter);

List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(25);
sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
sorter.setSortKeys(sortKeys);
}
else if (sortbyJComboBox.getSelectedItem() == "PRICE HIGH TO LOW"){
TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(analyzerTable.getModel());
analyzerTable.setRowSorter(sorter);

List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(25);
sortKeys.add(new RowSorter.SortKey(2, SortOrder.DESCENDING));
sorter.setSortKeys(sortKeys);
}
//        if (sortbyJComboBox.getSelectedItem() == "PRICE LOW TO HIGH"){
//           JTable table = new JTable((TableModel) analyzerTable);
//           TableRowSorter<(TableModel)JTable sorter;
//analyzerTable> sorter = new TableRowSorter<TableModel>(table.getModel());
//            analyzerTable.setRowSorter(sorter);
//
//List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
//sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING));
//sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
//sorter.setSortKeys(sortKeys);
//        }
        
        
    }//GEN-LAST:event_sortbyJComboBoxMouseClicked

    private void sortbyJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortbyJComboBoxActionPerformed

    private void sortbyJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortbyJComboBoxItemStateChanged
       if (sortbyJComboBox.getSelectedItem() == "PRICE LOW TO HIGH"){
TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(analyzerTable.getModel());
analyzerTable.setRowSorter(sorter);

List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(25);
sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
sorter.setSortKeys(sortKeys);
}
else if (sortbyJComboBox.getSelectedItem() == "PRICE HIGH TO LOW"){
TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(analyzerTable.getModel());
analyzerTable.setRowSorter(sorter);

List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(25);
sortKeys.add(new RowSorter.SortKey(2, SortOrder.DESCENDING));
sorter.setSortKeys(sortKeys);
}
    }//GEN-LAST:event_sortbyJComboBoxItemStateChanged

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ElectrolyteButton;
    private javax.swing.JButton HematologyButton;
    private javax.swing.JScrollPane MicroplateTable;
    private javax.swing.JPanel Panel;
    private javax.swing.JLabel Product1;
    private javax.swing.JLabel Product2;
    private javax.swing.JTabbedPane TabPanel;
    private javax.swing.JTextField analyzerSearch;
    private javax.swing.JTextField analyzerSearch1;
    private javax.swing.JTextField analyzerSearch2;
    private javax.swing.JTextField analyzerSearch3;
    private javax.swing.JTextField analyzerSearch4;
    private javax.swing.JTextField analyzerSearch5;
    private javax.swing.JTable analyzerTable;
    private javax.swing.JTable analyzerTable1;
    private javax.swing.JTable analyzerTable2;
    private javax.swing.JTable analyzerTable4;
    private javax.swing.JTable analyzerTable5;
    private javax.swing.JButton buttongasButton;
    private javax.swing.JScrollPane centrifugesTable;
    private javax.swing.JButton cogulationButton;
    private javax.swing.JTextArea description;
    private javax.swing.JTextArea description1;
    private javax.swing.JButton drugtestingButton;
    private javax.swing.JScrollPane incubatorTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JScrollPane lcmsSolventsTable;
    private javax.swing.JTable lcmsTable;
    private javax.swing.JLabel name;
    private javax.swing.JLabel name1;
    private javax.swing.JScrollPane reagentsTable;
    private javax.swing.JComboBox sortbyJComboBox;
    private javax.swing.JButton urinalysisButton;
    // End of variables declaration//GEN-END:variables
}
